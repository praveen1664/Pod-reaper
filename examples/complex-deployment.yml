# a more complex example with permissions and details

---
# namespace for the reaper
apiVersion: v1
kind: Namespace
metadata:
  name: reaper

---
# service account for running pod-reaper
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-reaper-service-account
  namespace: reaper

---
# minimal permissions required for running pod-reaper at cluster level
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reaper-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "delete"]

---
# binding the above cluster role (permissions) to the above service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-reaper-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pod-reaper-cluster-role
subjects:
- kind: ServiceAccount
  name: pod-reaper-service-account
  namespace: reaper

---
# A much more complicated deployment of pod-reaper, containing 3 reapers.
# For each reaper, all conditions must be met to reap a pod
#  1. chaos-after-2min runs every 30s. conditions:
#     - the pod is running in the kube-system namespace
#     - the pod does not have the label "pod-reaper: disabled"
#     - the pod has been running for >2 mintes
#     - a random number is generated below a threshold (30% chance)
#  2. chaos runs every 5s conditions:
#     - a random number is generated below a threshold (5% chance) 
#  3. error runs every 3m conditions:
#     - pod has container status in the set { Error, ErrImagePull, ImagePullBackOff }
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-reaper
  namespace: reaper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pod-reaper
  template:
    metadata:
      labels:
        app: pod-reaper
        pod-reaper: disabled # label used to exclude itself from chaos-after-2min reaper
    spec:
      serviceAccount: pod-reaper-service-account
      containers:

      - name: chaos-after-2min # reaper 1
        image: target/pod-reaper
        resources:
          limits:
            cpu: 30m
            memory: 30Mi
          requests:
            cpu: 20m
            memory: 20Mi
        env:
          # only look for pods in the kube-system namespace
          - name: NAMESPACE
            value: kube-system
          # run every 30 seconds
          - name: SCHEDULE
            value: "@every 30s"
          # exclude pods with metadata label pod-reaper: disabled
          - name: EXCLUDE_LABEL_KEY
            value: pod-reaper
          - name: EXCLUDE_LABEL_VALUES
            value: disabled
          # flag pods that have been alive for more than 2 minutes
          - name: MAX_DURATION
            value: 2m
          # randomly flag 30% of pods whenever they are checked
          - name: CHAOS_CHANCE
            value: ".3"
          # increase logging
          - name: LOG_LEVEL
            value: debug

      - name: chaos # reaper 2
        image: target/pod-reaper
        resources:
          limits:
            cpu: 30m
            memory: 30Mi
          requests:
            cpu: 20m
            memory: 20Mi
        env:
          # cron job based schedule (with seconds)
          - name: SCHEDULE
            value: "15 * * * * *"
          # randomly flag 5% of pods whenever they are checked
          - name: CHAOS_CHANCE
            value: ".05"
          # increase logging
          - name: LOG_LEVEL
            value: debug

      - name: error # reaper 3
        image: target/pod-reaper
        imagePullPolicy: Never # set to never for local minikube testing
        resources:
          limits:
            cpu: 30m
            memory: 30Mi
          requests:
            cpu: 20m
            memory: 20Mi
        env:
          # check pods every 3 min
          - name: SCHEDULE
            value: "0/3 * * * *"
          # check if container status is in the set  { Error, ErrImagePull, ImagePullBackOff }
          - name: CONTAINER_STATUSES
            value: "Error,ErrImagePull,ImagePullBackOff"
          # increase logging
          - name: LOG_LEVEL
            value: debug
